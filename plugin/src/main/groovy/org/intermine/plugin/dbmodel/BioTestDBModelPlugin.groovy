package org.intermine.plugin.dbmodel

import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.file.FileTree
import org.gradle.api.tasks.SourceSetContainer
import org.gradle.api.tasks.util.PatternSet

class BioTestDBModelPlugin implements Plugin<Project>{

    @Override
    void apply(Project project) {

        project.task('copyBioGenomicModel') {
            description "Copies the genomic_model.xml file (generated by biomodel adding genomic_additions and so.obo) into the output resources"
            dependsOn 'processResources'

            doLast {
                SourceSetContainer sourceSets = (SourceSetContainer) project.getProperties().get("sourceSets")
                String buildResourcesMainDir = sourceSets.getByName("main").getOutput().resourcesDir
                FileTree fileTree = project.zipTree(project.configurations.getByName("bioModel").singleFile)
                PatternSet patternSet = new PatternSet()
                patternSet.include("genomic_model.xml")
                File file = fileTree.matching(patternSet).singleFile
                String modelFilePath = buildResourcesMainDir + File.separator + "genomic_model.xml"
                file.renameTo(modelFilePath)
                file.createNewFile()
            }
        }

        project.task('copyGlobalAdditionsFile') {
            description "Copies the extra global additions file onto the classpath for tests"
            doLast {
                SourceSetContainer sourceSets = (SourceSetContainer) project.getProperties().get("sourceSets")
                String buildResourcesMainDir = sourceSets.getByName("main").getOutput().resourcesDir
                project.copy {
                    from project.rootDir.absolutePath + "/" + "TEST-global_additions.xml"
                    into buildResourcesMainDir
                    rename { 'global_additions.xml' }
                }
            }
        }

        project.task('mergeModels') {
            description "Merges the bio-source specific additions.xml into an intermine XML model, plus add a TEST model"
            dependsOn 'copyBioGenomicModel', 'copyGlobalAdditionsFile'
            doLast {
                SourceSetContainer sourceSets = (SourceSetContainer) project.getProperties().get("sourceSets")
                String buildResourcesMainDir = sourceSets.getByName("main").getOutput().resourcesDir

                String inputModelFilePath = buildResourcesMainDir + File.separator + "genomic_model.xml"

                def ant = new AntBuilder()
                ant.taskdef(name: "mergeBioSourceModel", classname: "org.intermine.task.ModelMergerTask") {
                    classpath {
                        pathelement(path: project.configurations.mergeModel.asPath)
                        dirset(dir: project.buildDir.absolutePath)
                    }
                }

                // merge in our test files
                ant.mergeBioSourceModel(inputModelFile: inputModelFilePath, additionsFile: "global_additions.xml",
                            outputFile: inputModelFilePath)
            }
        }
    }
}